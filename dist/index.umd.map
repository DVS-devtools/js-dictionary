{"version":3,"sources":["index.js"],"names":["Dictionary","get","bind","list","options","dict","showKey","parameters","key","toUpperCase"],"mappings":";AAiFe,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA7ETA,IAAAA,EA6ES,WA5EG,SAAA,IAAA,EAAA,KAAA,GACLC,KAAAA,IAAM,KAAKA,IAAIC,KAAK,MACpBC,KAAAA,KAAO,KAAKA,KAAKD,KAAK,MA0EpB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAtDkC,MAAA,WAAxCE,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,CAAEC,KAAM,GAAIC,QAAS,OAC5BF,IACKG,KAAAA,WAAaH,KAoDf,CAAA,IAAA,MAvCPI,MAAAA,SAAAA,GAII,OAFJA,EAAMA,EAAIC,cAEsB,QAA5B,KAAKF,WAAWD,QAIJE,KAAAA,OAAAA,EAAZ,MAE4B,YAA5B,KAAKD,WAAWD,QAIZ,KAAKC,WAAWF,KAAKG,GACd,KAAKD,WAAWF,KAAKG,GAEpBA,KAAAA,OAAAA,EAAZ,MAKA,KAAKD,WAAWF,KAAKG,GACd,KAAKD,WAAWF,KAAKG,GAEzB,KAcA,CAAA,IAAA,OALJ,MAAA,WACI,OAAA,KAAKD,WAAWF,SAIhB,EAAA,GAAA,EAAA,IAAIL,EAAJ,QAAA,QAAA","file":"index.umd.map","sourceRoot":"../src","sourcesContent":["/**\n * @class Dictionary\n * @description Library to get Dictionary values\n */\nclass Dictionary {\n    constructor() {\n        this.get = this.get.bind(this);\n        this.list = this.list.bind(this);\n    }\n\n    /**\n     * @memberOf Dictionary\n     * @function init\n     * @description Initialize the Dictionary class\n     * @param {Object} options (see attributes below)\n     * @param {Object} [options.dict = {}] dictionary object with the required translations\n     * @params {String} [options.showKey = 'all'] flag to specify the behaviour\n     * when no key is found:\n     * 'all' = Show always the key (debug purpose);\n     * 'missing' = Show the key only if no translation is found\n     * false | null = Show empty string if no translation is found\n     * @example\n     * Dictionary.init({\n     *     dict: dictObject,\n     *     showKey: false\n     * });\n     */\n    init(options = { dict: {}, showKey: 'all' }) {\n        if (options) {\n            this.parameters = options;\n        }\n    }\n\n    /**\n     * @memberOf Dictionary\n     * @function get\n     * @description Search the given key,\n     * return based on the showKey value\n     * @see init\n     * @param key\n     * @returns {*}\n     */\n    get(key) {\n        // convert key to upper case\n        key = key.toUpperCase();\n\n        if (this.parameters.showKey === 'all') {\n            // 'all case':\n            // valued keys : show key name\n            // void keys : show key name\n            return `[[${key}]]`;\n        }\n        if (this.parameters.showKey === 'missing') {\n            // 'missing' case:\n            // valued keys : show value of key\n            // void keys : show key name\n            if (this.parameters.dict[key]) {\n                return this.parameters.dict[key];\n            }\n            return `[[${key}]]`;\n        }\n        // standard case\n        // valued keys : show value of key\n        // void keys : show void string\n        if (this.parameters.dict[key]) {\n            return this.parameters.dict[key];\n        }\n        return '';\n    }\n\n    /**\n     * @memberOf Dictionary\n     * @function list\n     * @description Returns the entire dict object\n     * @returns {Dictionary.options.dict|{}}\n     */\n    list() {\n        return this.parameters.dict;\n    }\n}\n\nexport default new Dictionary();"]}